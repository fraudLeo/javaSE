/*
    方法在执行过程当中，在JVM中的内存是如何分配的？ 内存是如何变化的？
    1. 如果方法只定义，但是不调用 是不会执行的，并且也不会给该方法分配运行所属的内存空间.
    `只有在调用这个方法的时候,才会动态的给这个方法分配所属的内存空间
    2. 在JVM内存划分上，有这样的三块主要的内存空间：(当然,除了这三块之外还有其他的内存空间)
        * 方法区
        * 堆内存
        * 栈内存

    3. 关于 栈 数据结构:
    * 栈: stack ,是一种数据结构
    * 数据结构是独立的学科,不属于任何编程语言的范畴,只不过在大多数编程语言当中都要使用数据结构.
    * 常见的数据结构:
        - 数组
        - 队列
        - 栈
        - 链表
        - 二叉树
        - 哈希表/散列表
    4. 方法代码片段在哪里? 方法执行的时候执行过程的内存在那里分配?
        * 方法代码片段 属于.class字节码文件的一部分 字节码文件在类加载的时候将其放到了方法区
        所以JVM中的三块主要的内存空间中,方法去内存最先有数据存放了代码片段
        * 代码片段虽然在方法去内存当中只有一份,但是可以被重复调用
        每一次调用这个方法的时候,需要给给方法分配独立的活动场所,在栈内存中分配[占内存中分配方法运行的所属内存空间]

    5. 方法在调用的瞬间,会给该方法分配独立的内存空间,在栈中分配,此时发生 压栈 动作.
       方法执行结束之后,给该方法分配的空间全部释放,此时发生 弹栈 动作
       return; 执行的就是弹栈

    6. 局部变量在栈中存储.局部变量在方法体中申明

    7. 方法调用的时候 在参数传递的时候,设计及上传递的是变量中保存的那个值传递过去了



 */

/**
 * 1 栈帧永远指向栈顶元素
 * 2 栈顶元素处于活跃状态,其它元素静止
 * 3 术语:
 *      压栈/入栈/push
 *      弹栈/出栈/pop
 *
 * 4 站数据结构存储数据的特点是:
 *  先进后出
 *  后进先出
 */
public class MethodTest06 {
    public static void main(String[] args) {

    }
}



















